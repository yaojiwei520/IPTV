name: IPTV 数据自动更新与清洗

# 1. 触发条件：每15分钟运行一次，并允许手动触发
on:
  schedule:
    - cron: '*/15 * * * *'
  workflow_dispatch:

jobs:
  update_and_clean:
    runs-on: ubuntu-latest
    
    # 授予 GITHUB_TOKEN 写入权限
    permissions:
      contents: write 

    steps:
      # 1. 检出仓库代码 (保持不变)
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 拉取、清洗并合并数据 (保持不变)
      - name: 拉取、清洗并合并数据
        id: process_data
        run: |
          # ... (数据处理逻辑，此处省略以保持代码简洁，内容与之前提供的一致) ...
          SOURCE_URL="https://raw.githubusercontent.com/hujingguang/ChinaIPTV/main/cnTV_AutoUpdate.m3u8"
          TEMP_FILE="downloaded_data.m3u8"
          CLEANED_FILE="cnTV_AutoUpdate.m3u"
          TARGET_FILE="iptv.m3u"
          CHANNELS_TO_KEEP='湖南爱晚|湖南娱乐频道|金鹰卡通|湖南国际频道|dianshiju.hunan|长沙新闻频道'
          
          # 核心拉取和清洗逻辑
          curl -s $SOURCE_URL -o $TEMP_FILE
          if ! grep -q '#EXTM3U' $TEMP_FILE; then
            echo "错误：下载的文件不是有效的 M3U 格式或内容为空。"
            echo "need_commit=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "#EXTM3U" > $CLEANED_FILE
          awk -v channels="$CHANNELS_TO_KEEP" '
            BEGIN { FS=","; OFS=","; is_keep=0 }
            /^#EXTM3U/ { next }
            /^#EXTINF/ {
              if ($0 ~ channels) {
                print $0 >> "'"$CLEANED_FILE"'";
                is_keep = 1;
              } else {
                is_keep = 0;
              }
            }
            !/^#/ && is_keep {
              print $0 >> "'"$CLEANED_FILE"'";
              is_keep = 0;
            }
          ' $TEMP_FILE
          if [[ $(wc -l < "$CLEANED_FILE") -le 1 ]]; then
            echo "need_commit=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          if [ ! -f "$TARGET_FILE" ]; then
            echo "#EXTM3U" > $TARGET_FILE
          fi
          if [ "$(tail -c 1 "$TARGET_FILE" | wc -l)" -eq 0 ]; then
            echo "" >> $TARGET_FILE
          fi
          tail -n +2 "$CLEANED_FILE" >> $TARGET_FILE
          echo "need_commit=true" >> $GITHUB_OUTPUT

      # 3. 提交数据文件更改 (保持不变)
      - name: 提交 IPTV 数据文件
        if: steps.process_data.outputs.need_commit == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "🤖 [Actions] 自动更新 IPTV 数据并清洗"
          file_pattern: 'cnTV_AutoUpdate.m3u iptv.m3u'
          commit_author: 'GitHub Actions <actions@github.com>'

      # 4. 记录版本日志 (保持不变)
      - name: 记录版本日志 VersionLog.md
        if: steps.process_data.outputs.need_commit == 'true'
        run: |
          LOG_FILE="VersionLog.md"
          TARGET_FILE="iptv.m3u"
          CURRENT_TIME=$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')
          LOG_ENTRY="* **${CURRENT_TIME} (CST)**: 自动更新和清洗直播源数据，并合并到 \`${TARGET_FILE}\`。"
          
          if [ ! -f "$LOG_FILE" ]; then
            echo "# 版本更新日志" > $LOG_FILE
            echo "记录每次 GitHub Actions 自动更新的时间线。" >> $LOG_FILE
            echo "" >> $LOG_FILE
          fi
          
          # 在第四行插入新的日志条目
          sed -i "4i\\${LOG_ENTRY}" $LOG_FILE
          
      # 5. 提交版本日志 (关键优化在此处)
      - name: 提交版本日志 (并解决冲突)
        if: steps.process_data.outputs.need_commit == 'true'
        run: |
          # 在尝试进行第二次提交/amend之前，先拉取远程最新更改
          # 这样可以确保本地仓库是 up to date，解决 non-fast-forward 错误
          git pull --rebase
          
          # 然后再运行 git-auto-commit-action 的核心逻辑
          # 由于 git-auto-commit-action 内部不接受 `token`，
          # 我们需要手动运行它所执行的 `git` 命令，或者切换到手动 Git 块
          # 考虑到 `--amend` 选项的复杂性，使用 `run` 块进行手动提交更可靠。
          
          # 1. 添加文件
          git add VersionLog.md
          
          # 2. 尝试追加提交 (amend)
          # 使用 `commit_options: '--amend --no-edit'` 来保证合并
          # 并在失败时回退到创建新提交
          git commit --amend --no-edit || git commit -m "📝 [Actions] 更新 VersionLog.md"
          
          # 3. 推送
          git push
        # ❗️ 移除 uses: stefanzweifel/git-auto-commit-action@v5 
        # ❗️ 移除 with: block (已改为手动 run 块)
